import os
import telebot
from telebot import types
from dotenv import load_dotenv
from mistralai import Mistral
import io
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∫–ª—é—á–µ–π ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_BOT_TOKEN:
    logger.error(
        "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    )
    exit(1)
if not MISTRAL_API_KEY:
    logger.error(
        "–û—à–∏–±–∫–∞: –ö–ª—é—á Mistral API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MISTRAL_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    )
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Mistral API
mistral_client = Mistral(api_key=MISTRAL_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
user_temperature = {}


def generate_text_with_mistral(prompt: str, temperature: float) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π.
    """
    try:
        chat_response = mistral_client.chat.complete(
            model="mistral-large-latest",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã.",
                },
                {
                    "role": "user",
                    "content": f"–ù–∞–ø–∏—à–∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏ –Ω–∞ —Ç–µ–º–µ: '{prompt}', –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –¥–æ–±–∞–≤—å —Ö—ç—à—Ç–µ–≥–∏",
                },
            ],
            temperature=temperature,
        )
        return chat_response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å Mistral: {e}")
        if "AuthenticationError" in str(e) or "invalid api key" in str(e).lower():
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API –∫–ª—é—á Mistral."
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."


def generate_image_with_mistral(prompt: str) -> bytes | None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Mistral AI.
    """
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_agent = mistral_client.beta.agents.create(
            model="mistral-medium-2505",
            name="–ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            description="–ê–≥–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.",
            instructions="–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ–≥–¥–∞ —Ç–µ–±—è –ø—Ä–æ—Å—è—Ç —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ.",
            tools=[{"type": "image_generation"}],
            completion_args={
                "temperature": 0.5,
                "top_p": 0.9,
            },
        )

        # –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –∞–≥–µ–Ω—Ç–æ–º
        response = mistral_client.beta.conversations.start(
            agent_id=image_agent.id,
            inputs=f"–°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–º–µ –ø–æ—Å—Ç–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        )

        # –ü–æ–∏—Å–∫ file_id –≤ –æ—Ç–≤–µ—Ç–µ
        file_id = None
        if hasattr(response, "outputs"):
            for chunk in response.outputs:
                if hasattr(chunk, "content"):
                    for content in chunk.content:
                        if hasattr(content, "type") and content.type == "tool_file":
                            file_id = content.file_id
                            break
                if file_id:
                    break

        if not file_id:
            logger.error(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ Mistral. –í–æ–∑–º–æ–∂–Ω–æ, –∞–≥–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å."
            )
            return None

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_bytes_stream = mistral_client.files.download(file_id=file_id)
        return file_bytes_stream.read()
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Mistral (—á–µ—Ä–µ–∑ beta.agents): {e}"
        )
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞ ---
@bot.message_handler(commands=["start"])
def send_welcome(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è.
    """
    user_id = message.from_user.id
    user_temperature[user_id] = 0.7  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞

    user_name = (
        message.from_user.first_name or message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–õ–æ–≥–∏—á–µ—Å–∫–∏–π"),
        types.KeyboardButton("–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä"),
        types.KeyboardButton("–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
    )

    bot.reply_to(
        message,
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
        "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Mistral AIüôè\n\n"
        "ü™Ñ –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –º–µ–Ω—é:\n"
        "üîπ –õ–æ–≥–∏—á–µ—Å–∫–∏–π ‚Äî —Ç–æ—á–Ω—ã–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "üîπ –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä ‚Äî —è—Ä–∫–∏–π, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "üîπ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚Äî —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —ç–º–æ—Ü–∏–∏ –≤ –±–∞–ª–∞–Ω—Å–µ\n\n"
        "‚úç –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞.",
        reply_markup=markup,
    )


@bot.message_handler(
    func=lambda message: message.text
    in ["–õ–æ–≥–∏—á–µ—Å–∫–∏–π", "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä", "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"]
)
def set_temperature(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.
    """
    user_id = message.from_user.id
    style = message.text

    temps = {
        "–õ–æ–≥–∏—á–µ—Å–∫–∏–π": 0.1,
        "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Ç–µ—Ä": 1.0,
        "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π": 0.6,
    }
    user_temperature[user_id] = temps[style]

    bot.reply_to(
        message,
        f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style}\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞, –∏ —è –Ω–∞–ø–∏—à—É –µ–≥–æ –¥–ª—è —Ç–µ–±—èüôå",
        # reply_markup –æ—Å—Ç–∞–≤–ª–µ–Ω, –∫–∞–∫ –µ—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫–∏ –Ω–µ –∏—Å—á–µ–∑–∞—é—Ç
    )


@bot.message_handler(func=lambda message: True)
def process_prompt_step(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–º–ø—Ç–æ–≤) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö.
    """
    chat_id = message.chat.id
    user_prompt = message.text
    user_id = message.from_user.id
    user_name = (
        message.from_user.first_name or message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    )
    temperature = user_temperature.get(user_id, 0.7)

    bot.send_message(
        chat_id,
        f"–£–∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–≤–æ–π –ø–æ—Å—Ç, {user_name}ü§ç",
    )
    try:
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        generated_text = generate_text_with_mistral(user_prompt, temperature)
        if not generated_text:
            bot.send_message(
                chat_id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º.",
            )
            return

        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–æ–º–ø—Ç—É
        generated_image_bytes = generate_image_with_mistral(user_prompt)

        # –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if generated_image_bytes:
            image_file = io.BytesIO(generated_image_bytes)
            image_file.name = "generated_image.png"

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
            caption_limit = 1024
            truncated_caption = (
                (generated_text[:caption_limit] + "...")
                if len(generated_text) > caption_limit
                else generated_text
            )

            bot.send_photo(chat_id, image_file, caption=truncated_caption)
            logger.info(f"–ü–æ—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        else:
            bot.send_message(
                chat_id,
                f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç, {user_name}:\n\n{generated_text}\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.",
            )
            logger.info(
                f"–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
            )

    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_prompt_step: {e}")
        bot.send_message(
            chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
        )


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def run_bot():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling.
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
    bot.remove_webhook()
    logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (–µ—Å–ª–∏ –±—ã–ª).")
    bot.polling(none_stop=True)


if __name__ == "__main__":
    run_bot()
